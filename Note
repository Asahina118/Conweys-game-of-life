Coordinate input reading Java:

List<Integer> coordinate = Stream.of(input.split(","))
                    .map(String::trim)
                    .map(Integer::parseInt).toList();

and then add this motherfucker to a List<List<Integer>>

Map initialization using IntStream:
        map = IntStream.range(0, size)
                .mapToObj(x -> IntStream.range(0, size)
                        .mapToObj(y -> new Cell(x, y))
                        .toList())
                .toList();

mapToObj is just a map from integer entry x to an object.
Here, for the outer list, we map every integer to a list object.
For every such list object, we map each integer entry to a Cell.
After the mapping, we need to do the usual practice of returning it by toList from the Stream object.

The amazing part of such initialization is that we concatenate "first initialize with int and then set it new Cell" with the loop index tracked.

progress:
return coordinate and initialize alive cells

overall flow:
apply rules -> 